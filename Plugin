<?php
if (!defined('__TYPECHO_ROOT_DIR__')) exit;

/**
 * <strong style="color:#56a0e0;">登录通知</strong> 
 * 
 * @package LoginToNotice
 * @author 小乔
 * @version 1.0
 * @link https://iqdw.cc/
 */
class LoginToNotice_Plugin implements Typecho_Plugin_Interface{
	/* 激活插件方法 */
	public static function activate(){
        //挂载登录失败接口
        Typecho_Plugin::factory('Widget_Login')->loginFail = array(__CLASS__, 'loginFail');
		//挂载登录成功接口
		Typecho_Plugin::factory('Widget_Login')->loginSucceed = array(__CLASS__, 'success');

		return '插件安装成功,请设置LoginToNotice';
	}
	 
	/* 禁用插件方法 */
	public static function deactivate(){
		return '插件禁用成功';
	}
	 
	/* 插件配置方法 */
	public static function config(Typecho_Widget_Helper_Form $form){
        // 公共区域
        $public_section = new Typecho_Widget_Helper_Layout('div', array('class=' => 'typecho-page-title'));
        // 区块标题
        $public_section->html('<h2>参数配置</h2>');
        $form->addItem($public_section);
        // Debug模式
        $public_debug = new Typecho_Widget_Helper_Form_Element_Checkbox('public_debug', array('enable' => _t('启用Debug')), array('enable'), _t('是否启用Debug模式'), _t('启用后将在插件目录生成debug.txt文件，可记录邮件发送记录'));
        $form->addInput($public_debug);
        // 发件人名称
        $public_name = new Typecho_Widget_Helper_Form_Element_Text('public_name', NULL, NULL, _t('发件人名称'), _t('邮件中显示的发信人名称，留空为博客名称'));
        $form->addInput($public_name);
        // 发件邮箱
        $public_mail = new Typecho_Widget_Helper_Form_Element_Text('public_mail', NULL, NULL, _t('发件邮箱地址'), _t('邮件中显示的发信地址'));
        $form->addInput($public_mail->addRule('required', _t('请输入发件邮箱地址'))->addRule('email', _t('请输入正确的邮箱地址')));
        // 收件地址
        $public_replyto = new Typecho_Widget_Helper_Form_Element_Text('public_receive', NULL, NULL, _t('收件邮箱地址'), _t('用于接收登录信息的邮箱'));
        $form->addInput($public_replyto->addRule('required', _t('请输入收件邮箱地址'))->addRule('email', _t('请输入正确的邮箱地址')));
        // SendCloud
        $sendcloud_section = new Typecho_Widget_Helper_Layout('div', array('class=' => 'typecho-page-title'));
        // 标题
        $sendcloud_section->html('<h2>Send Cloud邮件发送设置</h2>');
        $form->addItem($sendcloud_section);
        // API USER
        $sendcloud_api_user = new Typecho_Widget_Helper_Form_Element_Text('sendcloud_api_user', NULL, NULL, _t('API USER'), _t('请输入在SendCloud申请的API_USER'));
        $form->addInput($sendcloud_api_user);
        // API KEY
        $sendcloud_api_key = new Typecho_Widget_Helper_Form_Element_Text('sendcloud_api_key', NULL, NULL, _t('API KEY'), _t('请输入在SendCloud申请的API_KEY'));
        $form->addInput($sendcloud_api_key); 
	}

    /**
     * 个人用户的配置面板
     *
     * @access public
     * @param Typecho_Widget_Helper_Form $form
     * @return void
     */
    public static function personalConfig(Typecho_Widget_Helper_Form $form){
    	
    }	
	 
	/* 插件实现方法 */
	public static function render(){

	}

	//发送登录失败邮件
    public static function loginFail($user, $name, $password, $temporarily, $expire) {
        // 获取系统配置
        $options = Helper::options();
        // 获取插件配置
        $plugin = $options->plugin('LoginToNotice');
        // 请求参数
        $data = array(
        'apiUser' => $plugin->sendcloud_api_user, # Verification using api_user and api_key
        'apiKey' => $plugin->sendcloud_api_key,
        'from' => $plugin->public_mail, // 发件地址, # The sender, use the correct email address instead
        'fromName' => ( !isset($plugin->public_name) || empty($plugin->public_name) ) ? trim($options->title) : $plugin->public_name, // 发件人名称
        'to' => $plugin->public_receive, // 收件地址 # The recipient address,use the correct email address instead, multiple addresses with '; 'delimited
        'subject' => $options->title.'登录失败',
        'html' => '用户名:'.$name.'<br/>登录密码:'.$password.'<br/>登录IP:'.$_SERVER["REMOTE_ADDR"].'<br/>登录时间:'.date('Y-m-d H:i:s') 
        );
        return self::sendCloud($data);
    }
     //发送登录成功邮件
    public static function success($user, $name, $password, $temporarily, $expire) {
        // 获取系统配置
        $options = Helper::options();
        // 获取插件配置
        $plugin = $options->plugin('LoginToNotice');

        // 请求参数
        $data = array(
        'apiUser' => $plugin->sendcloud_api_user, # Verification using api_user and api_key
        'apiKey' => $plugin->sendcloud_api_key,
        'from' => $plugin->public_mail, // 发件地址, # The sender, use the correct email address instead
        'fromName' => ( !isset($plugin->public_name) || empty($plugin->public_name) ) ? trim($options->title) : $plugin->public_name, // 发件人名称
        'to' => $plugin->public_receive, // 收件地址 # The recipient address,use the correct email address instead, multiple addresses with '; 'delimited
        'subject' => $options->title.'登录成功',
        'html' => '用户名:'.$name.'<br/>登录密码:'.$password.'<br/>登录IP:'.$_SERVER["REMOTE_ADDR"].'<br/>登录时间:'.date('Y-m-d H:i:s') 
        );
        return self::sendCloud($data);
    }
	//使用Send Cloud发送通知邮件
    static public function sendCloud($data)
    {
        // 初始化Curl
        $ch = curl_init();
        // 请求地址
        curl_setopt($ch, CURLOPT_URL, 'http://api.sendcloud.net/apiv2/mail/send');
        // 基础验证
        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
        // 返回数据
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        // POST请求
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
        // 请求参数
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        // 执行请求
        $result = curl_exec($ch);
        // 获取错误代码
        $errno = curl_errno($ch);
        // 获取错误信息
        $error = curl_error($ch);
        // 关闭请求
        curl_close($ch);
        // 成功标识
        $flag = TRUE;
        // 获取插件配置
        $plugin = Helper::options()->plugin('LoginToNotice');
        // 如果开启了Debug
        if ( in_array('enable', $plugin->public_debug) ) {
            // 记录时间
            $log = '[Send Cloud] ' . date('Y-m-d H:i:s') . ': ' . PHP_EOL;
            // 如果失败
            if ( $errno ) {
                // 设置为失败
                $flag = FALSE;
                $log .= _t('邮件发送失败, 错误代码：' . $errno . '，错误提示: ' . $error . PHP_EOL);
            }
            // 转换为json
            if ( $json = json_decode($result) ) {
                // 失败
                if ( 200 != $json->statusCode ) {
                    // 设置为失败
                    $flag = FALSE;
                    $log .= _t('邮件发送失败，错误提示：' . $json->message . PHP_EOL);
                }
            }
            // 记录返回值
            $log .= _t('邮件发送返回数据：' . serialize($result) . PHP_EOL);
            // 输出分隔
            $log .= '-------------------------------------------' . PHP_EOL . PHP_EOL . PHP_EOL;
            // 写入文件
            file_put_contents(__DIR__ . '/debug.txt', $log, FILE_APPEND);
        }
        // 返回结果
        return $flag;
    }
}
